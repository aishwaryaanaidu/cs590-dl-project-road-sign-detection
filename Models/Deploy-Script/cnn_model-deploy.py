# -*- coding: utf-8 -*-
"""cnn-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sa8IuTYqPQWo_t82TAfu0oAbojvJrTA4
"""

#!unzip Model1.zip

import tensorflow as tf
from tensorflow import keras

new_model = tf.keras.models.load_model('saved_model/my_model')

classes = { 0:'Speed limit (20km/h)',
            1:'Speed limit (30km/h)', 
            2:'Speed limit (50km/h)', 
            3:'Speed limit (60km/h)', 
            4:'Speed limit (70km/h)', 
            5:'Speed limit (80km/h)', 
            6:'End of speed limit (80km/h)', 
            7:'Speed limit (100km/h)', 
            8:'Speed limit (120km/h)', 
            9:'No passing', 
            10:'No passing veh over 3.5 tons', 
            11:'Right-of-way at intersection', 
            12:'Priority road', 
            13:'Yield', 
            14:'Stop', 
            15:'No vehicles', 
            16:'Veh > 3.5 tons prohibited', 
            17:'No entry', 
            18:'General caution', 
            19:'Dangerous curve left', 
            20:'Dangerous curve right', 
            21:'Double curve', 
            22:'Bumpy road', 
            23:'Slippery road', 
            24:'Road narrows on the right', 
            25:'Road work', 
            26:'Traffic signals', 
            27:'Pedestrians', 
            28:'Children crossing', 
            29:'Bicycles crossing', 
            30:'Beware of ice/snow',
            31:'Wild animals crossing', 
            32:'End speed + passing limits', 
            33:'Turn right ahead', 
            34:'Turn left ahead', 
            35:'Ahead only', 
            36:'Go straight or right', 
            37:'Go straight or left', 
            38:'Keep right', 
            39:'Keep left', 
            40:'Roundabout mandatory', 
            41:'End of no passing', 
            42:'End no passing veh > 3.5 tons' }

import cv2
IMG_HEIGHT = 30
IMG_WIDTH = 30
channels = 3
from PIL import Image
import numpy as np

def get_prediction(image):
  all_images = []
  resize_image = []
  
  try:
      # image = cv2.imread(image)
      # print(type(image))
      image_fromarray = Image.fromarray(image, 'RGB')
      print(image_fromarray)
      resize_image = image_fromarray.resize((IMG_HEIGHT, IMG_WIDTH))
      all_images.append(np.array(resize_image))
  except:
      print("Error in " + image)

  image_array = np.array(all_images)

  predict_x=new_model.predict(image_array) 
  classes_x=np.argmax(predict_x,axis=1)
  predictions = []
  for preds in classes_x:
    predictions.append(classes[preds])
  print(predictions[0])
  return predictions[0]

def readb64(uri):
  #  print(uri)
  #  encoded_data = uri.split(',')[1]
  #  print(encoded_data)
  nparr = np.fromstring(base64.b64decode(uri), np.uint8)
  img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
  image_fromarray = Image.fromarray(img, 'RGB')
  print(image_fromarray)
  resize_image = image_fromarray.resize((IMG_HEIGHT, IMG_WIDTH))
  return img

import base64
my_string = ''
'''with open("/content/test1.png", "rb") as img_file:
    my_string = base64.b64encode(img_file.read())

img = readb64(my_string)
get_prediction(readb64(my_string))

get_prediction('/content/test1.png')
'''
#!pip install flask_ngrok
#!pip install flask_cors

#!pip install fastapi

#!pip install uvicorn

#!pip install nest_asyncio

#!pip install pyngrok

def convert_and_get_pred(base64_of_image):
    img = readb64(base64_of_image)
    print(img)
    road_sign_pred = get_prediction(img)
    return road_sign_pred

#!pip install flask-localtunnel

import nest_asyncio
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import sys
from typing import Optional
import uvicorn
#from flask_lt import run_with_lt
from pyngrok import conf, ngrok


conf.get_default().region = "eu"


origins = [
    "*"
]
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class get_traffic_sign(BaseModel):
    base64: str



# run_with_lt(app)
@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.post("/get-sign")
def read_root(req: get_traffic_sign):
    print(req.base64)
    pred = convert_and_get_pred(req.base64)
    return {"prediction": pred}

# url = ngrok.connect()
# print('Public URL:', url)
ssh_tunnel = ngrok.connect(8081)
print(ssh_tunnel)
nest_asyncio.apply()
uvicorn.run(app, port=8081)

#!pip install jprq



